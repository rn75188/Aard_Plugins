<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Pup_Tracker"
   author="Tipro"
   id="fd7d81748b3695ba71ecb857"
   language="Lua"
   purpose="Track XP"
   date_written="2023-03-19 16:49:27"
   requires="5.07"
   version="1.0"
   >

</plugin>
<!--  Triggers  -->
<triggers>

<trigger
	name="trigger_doubleStart_SH"
	match="For the next 15 minutes experience is doubled in honor of the new superhero."
	enabled="y"
	omit_from_output="n"
	sequence="100"
	script="Bonus_on"
	send_to="14"
>
</trigger>

<trigger
	name="trigger_doubleStart_donations"
	match="[    10 minutes of double exp started courtesy of donations being open   ]"
	enabled="y"
	omit_from_output="n"
	sequence="100"
	script="Bonus_on"
	send_to="14"
>
</trigger>

<trigger
	name="trigger_doubleStart_db"
    match="Double experience for 10 minutes courtesy of (.*?)'s daily blessing."
    enabled="y"
	omit_from_output="n"
	sequence="100"
	script="Bonus_on"
	send_to="14"
>
</trigger>

<trigger
	match="INFO: Bonus experience has now expired."
	name="trigger_DblEnd"
	enabled="y"
	sequence="100"
	script="reportDbl"
	omit_from_output="n"
>
</trigger>

<trigger
	match="Congratulations, Tipro. You have increased your powerups to *."
	name="trigger_pupGain"
	enabled="y"
	sequence="100"
	script="pupDB"
	omit_from_output="n"
>
<send>
    
</send>
</trigger>

</triggers>

<!--  Aliases  -->
<aliases>

  <alias
    enabled="y"
    match="^ *pup report *(\S*)? *(\S*)? *(\S*)?$"    
    regexp="y"
    script="report_totals"
/>

  <alias
  enabled="y"
  match="^ *pup table reset"
  regexp="y"
  script="drop_pup_table"
/>

  <alias
  enabled="y"
  match="^ *pup tracker help"
  regexp="y"
  script="pup_helper"
/>
  
</aliases>

<script>

bonus_on = 0
bonusPups = 0
pups = 0
first_pup_time = os.time()
last_pup_time = os.time()
channel = "spouse"
current_gold = 0
previous_gold = 0
solo = 1        --Used to track whether user is pupping solo or in group. 0 = grouped, 1 = solo
reload = 0      --Used to discard first pup after script is loaded
current_date = os.date("%Y-%m-%d")
char_subclass = "Unknown"
current_area = "Unknown"
last_area = "Unknown"
daily_double = 0
daily_gold = 0

function OnPluginInstall()
    print("Pup Tracker installed.")
    print("pup tracker help for commands")
    local db_path = GetInfo(66) .. "\\pup_tracker.db"
    local db = assert(sqlite3.open(db_path))
    
    create_pup_table(db)
    
    db:close()
    print("Database initialized.")
end

function create_pup_table(db)
    local db_tables = {}
    local query = "SELECT name FROM sqlite_master WHERE type='table'"
    local create_tables = {}
    
    for row in db:nrows(query) do
        db_tables[row.name] = true
    end
    
    if not db_tables["pup_data"] then
        print("Creating table 'pup_data'")
        table.insert(create_tables, [[
            CREATE TABLE pup_data (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                area TEXT NOT NULL,
                seconds INTEGER NOT NULL,
                gold INTEGER NOT NULL,
                double TEXT NOT NULL,
                solo TEXT NOT NULL,
                date TEXT NOT NULL,
                subclass TEXT NOT NULL,
                daily_double INTEGER NOT NULL,
                daily_gold INTEGER NOT NULL
            );
        ]])
    end

    if #create_tables > 0 then
        db:execute(table.concat(create_tables,""))
    end
end


require "gmcphelper" -- adds the gmcp() function for simplifying data access

function OnPluginBroadcast(msg, id, name, text)
  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "room.info") then
       roominfo = gmcp("room.info")
       current_area = roominfo.zone
	elseif (text == "char.worth") then
		charworth = gmcp("char.worth")
		current_gold = charworth.gold
		if previous_gold == 0 then previous_gold = current_gold end
    elseif (text == "group") then
        members = gmcp("group.members")
        solo = 1
        for i, member in ipairs(members) do
            if member.here == 1 then
                solo = 0
            end
        end
    elseif (text == "char.base") then
		charbase = gmcp("char.base")
		char_subclass = charbase.subclass
    end
  end
end


function Bonus_on()
    print("Dbl tracking activated")
	bonus_on = 1
end

function pupDB()
    local db_path = GetInfo(66) .. "\\pup_tracker.db"
    local db, err = assert(sqlite3.open(db_path))
    
    if not db then
        print("Failed to connect to the database: " .. err)
        return
    end
    
    local seconds = os.time() - last_pup_time
    if (seconds > 60) then
        print(seconds .. " since last pup. Too slow")
        last_pup_time = os.time()
        reload = 1
        return
    elseif (reload == 0) then
        print("First pup after reload discarded. Keep going.")
        reload = 1
        return
    end
    last_pup_time = os.time()
    local gold_gained = current_gold - previous_gold
    if 0 > gold_gained then
        print("Gold loss detected. Ignoring.")
        gold_gained = 0
    end
    previous_gold = current_gold
    current_date = os.date("%Y-%m-%d")

    --print(current_date)

    local insert_sql = string.format("INSERT INTO pup_data (seconds, area, gold, double, solo, date, subclass) VALUES (%d, '%s', %d, '%s', '%s', '%s', '%s');", seconds, current_area, gold_gained, double, solo, current_date, char_subclass)
    	local result, err = db:execute(insert_sql)
		if not result then
			Note("Error inserting pup_data: " .. tostring(err))
            --print (gold_gained, seconds, bonus_on, solo, current_area)
        else
			--Note ("Pup stats: Gold " .. gold_gained .. " Seconds " .. seconds .. " Bonus " .. bonus_on .. " Solo " .. solo .. " Area " .. current_area)
		end
    db:close()
end


function report_totals(name,line,wildcards)
    local db_path = GetInfo(66) .. "\\pup_tracker.db"
    local db = assert(sqlite3.open(db_path))

    local report_type = tostring(wildcards[1])
    local period = tostring(wildcards[2]) ~= "" and wildcards[2] or "all"
    local period_days = {day = -1, week = -7, month = -30, year = -365, all = -999999}
    local days = period_days[period] or period_days["all"]


    local select_clause = 
        "COUNT(*) as num_pups, " ..
        "ROUND(AVG(CASE WHEN double = 1 THEN seconds * 2 ELSE seconds END),1) as avg_seconds, " ..
        "ROUND(SUM(gold)/SUM(seconds),1) as avg_gold_per_second, " ..
        "MIN(date) as oldest_date"
    
    local where_clause = ""
    local group_by_clause = ""

    if report_type == "subclass" or report_type == "area" then
        select_clause = report_type .. ", " .. select_clause
        group_by_clause = "GROUP BY " .. report_type
    end

    if solo_only == "solo" then where_clause = "AND solo = 1"
    elseif solo_only == "group" then where_clause = "AND solo = 0" end

    local query = string.format("SELECT %s FROM pup_data WHERE date(date) > date('now', '%d days') %s %s", select_clause, days, where_clause, group_by_clause)

    --print(query)      -- Uncomment to see the query being run

    local found = false
    local oldest_date_printed = false
    for row in db:nrows(query) do
        found = true
        if not oldest_date_printed then
            print("Showing pup data since " .. row.oldest_date .. ":")
            oldest_date_printed = true
        end
        print((report_type == "subclass" and "Subclass: " .. row.subclass or report_type == "area" and "Area: " .. row.area or "") .. " | Pups: " .. row.num_pups .. " | SecPerPup: " .. row.avg_seconds .. " | GoldPerSec: " .. row.avg_gold_per_second)
    end
    if not found then print("No pup data found") end
    db:close()
end


function reportDbl()
    local channel = "spouse"
    SendNoEcho(channel .. ' ' .. bonusPups .. ' pups during dbl.')
    bonusPups = 0
    bonus_on = 0
end

function reset_pup_tracker()
  Note('Pup tracker reset')
  bonus_on = 0
  bonusPups = 0
  pups = 0
  first_pup_time = os.time()
  last_pup_time = os.time()
  pup_data = {}
end

function drop_pup_table()
    local db_path = GetInfo(66) .. "\\pup_tracker.db"
    local db = assert(sqlite3.open(db_path))
    local drop_table_sql = "DROP TABLE IF EXISTS pup_data;"
    local result, err = db:execute(drop_table_sql)
    if not result then
        Note("Error dropping pup_data: " .. tostring(err))
    else
        Note("Successfully dropped pup_data table")
    end
    db:close()

    OnPluginInstall()
end

function pup_helper()
    print("Pup Tracker Help:")
    print("pup report [area|sublass] [day|week|month|year|all] [solo|group]")
    print("pup table reset")
end

</script>

</muclient>