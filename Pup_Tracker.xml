<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<muclient>
<plugin
   name="Pup_Tracker"
   author="Tipro"
   id="fd7d81748b3695ba71ecb857"
   language="Lua"
   purpose="Track XP"
   date_written="2023-03-19 16:49:27"
   requires="5.07"
   version="1.0"
   >

</plugin>
<!--  Triggers  -->
<triggers>

<trigger
	name="trigger_doubleStart_SH"
	match="For the next 15 minutes experience is doubled in honor of the new superhero."
	enabled="y"
	omit_from_output="n"
	sequence="100"
	script="Bonus_on"
	send_to="14"
>
</trigger>

<trigger
	name="trigger_doubleStart_donations"
	match="[    10 minutes of double exp started courtesy of donations being open   ]"
	enabled="y"
	omit_from_output="n"
	sequence="100"
	script="Bonus_on"
	send_to="14"
>
</trigger>

<trigger
	name="trigger_doubleStart_db"
    match="Double experience for 10 minutes courtesy of (.*?)'s daily blessing."
    enabled="y"
	omit_from_output="n"
	sequence="100"
	script="Bonus_on"
	send_to="14"
>
</trigger>

<trigger
	match="INFO: Bonus experience has now expired."
	name="trigger_DblEnd"
	enabled="y"
	sequence="100"
	script="reportDbl"
	omit_from_output="n"
>
</trigger>

<trigger
	match="Congratulations, Tipro. You have increased your powerups to *."
	name="trigger_pupGain"
	enabled="y"
	sequence="100"
	script="pupDB"
	omit_from_output="n"
>
<send>
    
</send>
</trigger>

</triggers>

<!--  Aliases  -->
<aliases>

  <alias
  enabled="y"
  match="^ *pup report*$"
  regexp="y"
  script="report_totals"
/>
  
</aliases>

<script>

bonus_on = 0
bonusPups = 0
pups = 0
first_pup_time = os.time()
last_pup_time = os.time()
channel = "spouse"
current_gold = 0
previous_gold = 0
solo = 1        --Used to track whether user is pupping solo or in group. 0 = grouped, 1 = solo
reload = 0      --Used to discard first pup after script is loaded
current_date = os.date("%Y-%m-%d")
char_subclass = "Unknown"

-- [[ Plugin installation ]]
function OnPluginInstall()
    print("Pup Tracker installed.")
	local db_path = GetInfo(66) .. "\\pup_tracker.db"
	local db = assert(sqlite3.open(db_path))
	
	create_pup_table(db)
	
	db:close()
	print("Database initialized.")
end

function create_pup_table(db)
	local db_tables = {}
	local query = "SELECT name FROM sqlite_master WHERE type='table'"
	local create_tables = {}
	
	for row in db:nrows(query) do
		db_tables[row.name] = true
	end
	
	if not db_tables["pup_data"] then
		print("Creating table 'pup_data'")
		table.insert(create_tables, [[
			CREATE TABLE pup_data (
				id INTEGER PRIMARY KEY AUTOINCREMENT,
				area TEXT NOT NULL,
				seconds INTEGER NOT NULL,
                gold INTEGER NOT NULL,
                double TEXT NOT NULL,
                solo TEXT NOT NULL
			);
		]])
	end

	if #create_tables > 0 then
		db:execute(table.concat(create_tables,""))
	end
end

require "gmcphelper" -- adds the gmcp() function for simplifying data access

function OnPluginBroadcast(msg, id, name, text)
  if id == "3e7dedbe37e44942dd46d264" then -- message from the GMCP Handler
    if (text == "room.info") then
       roominfo = gmcp("room.info")
       current_area = roominfo.zone
	elseif (text == "char.worth") then
		charworth = gmcp("char.worth")
		current_gold = charworth.gold
		if previous_gold == 0 then previous_gold = current_gold end
    elseif (text == "group") then
        members = gmcp("group.members")
        solo = 1
        for i, member in ipairs(members) do
            if member.here == 1 then
                solo = 0
            end
        end
    elseif (text == "char.base") then
		charbase = gmcp("char.base")
		char_subclass = charbase.subclass
    end
  end
end


function get_pup_tracker()
    local saved_tracker = GetVariable('pup_tracker')
    local pup_tracker = tonumber(saved_tracker) or 5
    SetVariable('pup_tracker', pup_tracker)
    return pup_tracker
end

function pup_tracker_set(name, line, wildcards)
    local input_tracker = GetAliasWildcard(name, 'pup_tracker_set')
    local new_pup_tracker = tonumber(input_tracker) or get_pup_tracker()
    SetVariable('pup_tracker', new_pup_tracker)
    Note('Tracking Average Pups Over: ' .. new_pup_tracker)
end

function Bonus_on()
    print("Dbl tracking activated")
	bonus_on = 1
end

function pupDB()
    local db_path = GetInfo(66) .. "\\pup_tracker.db"
    local db, err = assert(sqlite3.open(db_path))
    
    if not db then
        print("Failed to connect to the database: " .. err)
        return
    end
    
    local seconds = os.time() - last_pup_time
    if (seconds > 60) then
        print(seconds .. " since last pup. Too slow")
        last_pup_time = now
        reload = 1
        return
    elseif (reload == 0) then
        print("First pup after reload discarded. Try again.")
        reload = 1
        return
    end
    last_pup_time = os.time()
    local gold_gained = current_gold - previous_gold
    previous_gold = current_gold

    print(current_date)

    local insert_sql = string.format("INSERT INTO pup_data (seconds, area, gold, double, solo) VALUES (%d, '%s', %d, '%s', '%s');", seconds, current_area, gold_gained, double, solo)
    	local result, err = db:execute(insert_sql)
		if not result then
			Note("Error inserting pup_data: " .. tostring(err))
            print (gold_gained, seconds, bonus_on, solo, current_area)
        else
			Note ("Pup stats: Gold " .. gold_gained .. " Seconds " .. seconds .. " Bonus " .. bonus_on .. " Solo " .. solo .. " Area " .. current_area)
		end
    db:close()
end

function report_totals()
    local db_path = GetInfo(66) .. "\\pup_tracker.db"
    local db = assert(sqlite3.open(db_path))
    local query = "SELECT area, COUNT(*) as num_pups, AVG(seconds) as avg_seconds, SUM(gold)/SUM(seconds) as avg_gold_per_second FROM pup_data GROUP BY area"
    local found = false
    for row in db:nrows(query) do
        found = true
        print("Area: " .. row.area .. ", Number of Pups: " .. row.num_pups .. ", Average Seconds: " .. row.avg_seconds .. ", Average Gold per Second: " .. row.avg_gold_per_second)
    end
    if not found then
        print("No pup data found")
    end
    db:close()
end

function reportDbl()
    local channel = "spouse"
    SendNoEcho(channel .. ' ' .. bonusPups .. ' pups during dbl.')
    bonusPups = 0
    bonus_on = 0
end

function reset_pup_tracker()
  Note('Pup tracker reset')
  bonus_on = 0
  bonusPups = 0
  pups = 0
  first_pup_time = os.time()
  last_pup_time = os.time()
  pup_data = {}
end


</script>

</muclient>